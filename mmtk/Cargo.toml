[package]
name = "mmtk"
version = "0.1.0"
rust-version = "1.61.0"
build = "build.rs"
edition = "2021"

[lib]
name = "mmtkpypy"
crate-type = ["cdylib"]

[profile.release]
lto = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
libc = "0.2"
lazy_static = "1.1"
once_cell = "1.10.0"
atomic_refcell = "0.1.7"
atomic = "0.4.6"
log = "0.4"
mmtk = { path = "../mmtk-core" } 

[build-dependencies]
built = { version = "0.5.1", features = ["git2"] }
cbindgen = "0.24.3"

#cbindgen . -o target/mmtk.h

[features]
default = []
mmtk_extreme_assertions = ["mmtk/extreme_assertions"]
nogc_lock_free = ["mmtk/nogc_lock_free"]
nogc_no_zeroing = ["mmtk/nogc_no_zeroing"]
# Use the env var VO_BIT=1 when building OpenJDK so the fastpath for setting the alloc bit will be compiled in.
# See README.
vo_bit = ["mmtk/vo_bit"]

# This compile time constant places the mark bit in the header of the object instead of on the side.
mark_bit_in_header = []

# Use malloc mark sweep - we should only run marksweep with this feature turned on.
malloc_mark_sweep = ["mmtk/malloc_mark_sweep"]

# We can select plan at runtime. So no need to use any of these features.
# However, if any of these is provided during build-time, we will ignore any runtime flag and
# always run this plan. Performance-wise there is no difference. The main reason for these features
# is to temporarily allow running performance tests without changing performance scripts.
nogc = []
semispace = []
gencopy = []
marksweep = []
pageprotect = []
immix = []